{
  "_args": [
    [
      {
        "raw": "jquery-pep@github:jquery/PEP",
        "scope": null,
        "escapedName": "jquery-pep",
        "name": "jquery-pep",
        "rawSpec": "github:jquery/PEP",
        "spec": "github:jquery/PEP",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:jquery/PEP.git",
          "sshUrl": "git+ssh://git@github.com/jquery/PEP.git",
          "httpsUrl": "git+https://github.com/jquery/PEP.git",
          "gitUrl": "git://github.com/jquery/PEP.git",
          "shortcut": "github:jquery/PEP",
          "directUrl": "https://raw.githubusercontent.com/jquery/PEP/master/package.json"
        }
      },
      "C:\\Users\\User\\Documents\\GitHub\\Teleprompter-Electron\\app"
    ]
  ],
  "_from": "jquery/PEP",
  "_id": "pepjs@0.4.3-pre",
  "_inCache": true,
  "_location": "/pepjs",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jquery-pep@github:jquery/PEP",
    "scope": null,
    "escapedName": "jquery-pep",
    "name": "jquery-pep",
    "rawSpec": "github:jquery/PEP",
    "spec": "github:jquery/PEP",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:jquery/PEP.git",
      "sshUrl": "git+ssh://git@github.com/jquery/PEP.git",
      "httpsUrl": "git+https://github.com/jquery/PEP.git",
      "gitUrl": "git://github.com/jquery/PEP.git",
      "shortcut": "github:jquery/PEP",
      "directUrl": "https://raw.githubusercontent.com/jquery/PEP/master/package.json"
    }
  },
  "_requiredBy": [],
  "_resolved": "git://github.com/jquery/PEP.git#0fae1e51895ca759432efbb93780003c4f60e593",
  "_shasum": "cd6bc67bfa9fdcb5e08bc8bd2df0f77dbe9f1e7e",
  "_shrinkwrap": null,
  "_spec": "jquery-pep@github:jquery/PEP",
  "_where": "C:\\Users\\User\\Documents\\GitHub\\Teleprompter-Electron\\app",
  "author": {
    "name": "jQuery Foundation and other contributors",
    "url": "https://github.com/jquery/PEP/blob/master/AUTHORS.txt"
  },
  "bugs": {
    "url": "https://github.com/jquery/PEP/issues"
  },
  "dependencies": {},
  "description": "Polyfill of the PointerEvents W3C spec",
  "devDependencies": {
    "atob": "^2.0.3",
    "bluebird": "^3.4.0",
    "chai-spies": "^0.7.1",
    "fs-extra": "^0.30.0",
    "glob": "^7.0.3",
    "grunt": "^1.0.1",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-git-authors": "^3.2.0",
    "grunt-jscs": "^3.0.0",
    "grunt-selenium-standalone": "^1.0.1",
    "intern": "^3.2.3",
    "lodash": "^4.13.1",
    "request": "^2.72.0",
    "rollup": "^0.29.0"
  },
  "files": [
    "dist/",
    "src/",
    "samples/"
  ],
  "gitHead": "0fae1e51895ca759432efbb93780003c4f60e593",
  "homepage": "https://github.com/jquery/PEP#readme",
  "license": "MIT",
  "main": "dist/pep.js",
  "name": "pepjs",
  "optionalDependencies": {},
  "readme": "# Pointer Events Polyfill - making pointer events usable today\r\n\r\n![PEP logo](pep-logo-shield.png)\r\n\r\nPEP polyfills pointer events in all browsers that haven't yet implemented them, providing a unified, responsive input model for all devices and input types. You can [read more about pointer events below](#why-pointer-events).\r\n\r\n## Getting Started\r\n\r\n1. Place the PEP script in the document head\r\n  - `<script src=\"https://code.jquery.com/pep/0.4.1/pep.js\"></script>`\r\n\r\n1. By default, no pointer events are sent from an element. This maximizes the possibility that a browser can deliver smooth scrolling and jank-free gestures. If you want to receive events, you must set the `touch-action` property of that element. Set up some elements to create events with the [`touch-action` attribute](http://www.w3.org/TR/pointerevents/#the-touch-action-css-property).\r\n\r\n1. Listen for the desired events\r\n  - `pointermove`: a pointer moves, similar to touchmove or mousemove.\r\n  - `pointerdown`: a pointer is activated, or a device button held.\r\n  - `pointerup`: a pointer is deactivated, or a device button released.\r\n  - `pointerover`: a pointer has moved onto an element.\r\n  - `pointerout`: a pointer is no longer on an element it once was.\r\n  - `pointerenter`: a pointer enters the bounding box of an element.\r\n  - `pointerleave`: a pointer leaves the bounding box of an element.\r\n  - `pointercancel`: a pointer will no longer generate events.\r\n\r\n1. As elements come and go, or have their `touch-action` attribute changed, they will send the proper set of pointer events.\r\n\r\n```html\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>PEP (Pointer Events Polyfill)</title>\r\n  <meta name=\"viewport\" content=\"width=device-width\">\r\n  <!-- include PEP -->\r\n  <script src=\"https://code.jquery.com/pep/0.4.1/pep.js\"></script>\r\n</head>\r\n<body>\r\n<button id=\"b\" touch-action=\"none\">Test button!</button>\r\n<p><output id=\"o\"></output></p>\r\n<script>\r\ndocument.getElementById( \"b\" ).addEventListener( \"pointerdown\", function( e ) {\r\n  document.getElementById( \"o\" ).innerHTML = \"that was a \" +\r\n    e.pointerType + \" \" + e.type + \" on a \"+ e.target.nodeName;\r\n} );\r\n</script>\r\n</body>\r\n</html>\r\n```\r\n\r\nSee also the [examples in the W3C Pointer Events Specification](http://www.w3.org/TR/pointerevents/#examples) and our own [samples for using PEP](http://jquery.github.io/PEP/).\r\n\r\n### Using PEP with jQuery\r\n\r\nYou can use pointer events with jQuery and PEP:\r\n```html\r\n<div id=\"canvas\" touch-action=\"none\"></div>\r\n<script src=\"pep.dist.js\"></script>\r\n<script src=\"jquery.js\"></script>\r\n<script>\r\n$(\"#canvas\").on(\"pointermove\", function(event) {\r\n  draw(event);\r\n});\r\n</script>\r\n```\r\nCheck out [this jsbin demo](http://jsbin.com/bojumofowa/1/edit?html,css,js,output) for a full demo.\r\n\r\njQuery doesn't copy all properties from the original event object to the event object provided in the event handler. You can find [a list of copied and normalized properties on the jQuery API docs](http://api.jquery.com/category/events/event-object/). To access any other original properties, use `event.originalEvent`.\r\n\r\n\r\n## Why Pointer Events?\r\n\r\nMouse events and touch events are fundamentally different beasts in browsers today, and that makes it hard to write cross-platform apps.\r\n\r\nFor example, a simple finger paint app needs plenty of work to behave correctly with mouse and touch:\r\n\r\nCurrent platforms that implement touch events also provide mouse events for backward compatibility; however, only a subset of mouse events are fired and the semantics are changed.\r\n\r\n- Mouse events are only fired after the touch sequence ends.\r\n- Mouse events are not fired on elements without a `click` event handler. One must be attached by default, or directly on the element with `onclick`.\r\n- `click` events are not fired if the content of the page changes in a `mousemove` or `mouseover` event.\r\n- `click` events are fired 300ms after the touch sequence ends.\r\n- More information: [Apple Developer Documentation](http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safariwebcontent/HandlingEvents/HandlingEvents.html).\r\n\r\nAdditionally, touch events are sent only to the element that received the `touchstart`. This is fundamentally different than mouse events, which fire on the element that is under the mouse. To make them behave similarly, touch events need to be retargeted with `document.elementFromPoint`.\r\n\r\nThese incompatibilities lead to applications having to listen to 2 sets of events, mouse on desktop and touch for mobile.\r\n\r\n**This forked interaction experience is cumbersome and hard to maintain.**\r\n\r\nInstead, there should exist a set of events that are normalized such that they behave exactly the same, no matter the source: touch, mouse, stylus, skull implant, etc. To do this right, this normalized event system needs to be available for all the web platform to use.\r\n\r\n*Thus, Pointer Events!*\r\n\r\n## Polyfill Limitations\r\n\r\n### touch-action\r\n\r\nAccording to the spec, the\r\n[touch-action](http://www.w3.org/TR/pointerevents/#the-touch-action-css-property) CSS property controls whether an element will perform a \"default action\" such as scrolling, or receive a continuous stream of pointer events.\r\n\r\nDue to the difficult nature of polyfilling new CSS properties, this library will use a touch-action *attribute* instead. In addition, run time changes involving the `touch-action` attribute will be monitored for maximum flexibility.\r\n\r\nTouches will not generate events unless inside of an area that has a valid `touch-action` attribute defined. This is to maintain composition scrolling optimizations where possible.\r\n\r\n### Browser Compatibility\r\n\r\nPEP should work on IE 10+ and the latest versions of Chrome, Safari, Firefox, and Opera. In any [browser implementing pointer events natively](http://caniuse.com/#feat=pointer) (detected by checking for `window.PointerEvent`), PEP won't do anything.\r\n\r\n## Building PEP\r\n\r\nIf you want to build PEP yourself from source, you'll need to install [Node.js](https://nodejs.org/en/download/) and run the following commands:\r\n\r\n```sh\r\n# Install all dependencies\r\nnpm install\r\n\r\n# Build PEP\r\nnpm run build\r\n```\r\n\r\nWhen the build completes, the generated files will be available in the `dist/` directory.\r\n\r\n*NOTE: Running the demos requires building PEP.*\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jquery/PEP.git"
  },
  "scripts": {
    "build": "grunt build",
    "ci": "grunt ci",
    "test": "grunt test"
  },
  "version": "0.4.3-pre",
  "web-platform-tests": {
    "repo": "w3c/web-platform-tests#c5d333c859075744b3828a2a29057ee456234cb2",
    "path": "./tests/w3c"
  }
}
