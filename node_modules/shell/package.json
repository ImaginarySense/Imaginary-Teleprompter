{
  "_args": [
    [
      {
        "raw": "shell@^0.3.2",
        "scope": null,
        "escapedName": "shell",
        "name": "shell",
        "rawSpec": "^0.3.2",
        "spec": ">=0.3.2 <0.4.0",
        "type": "range"
      },
      "/home/javier/Dropbox/Imaginary/Tech/teleprompter/Teleprompter-Core"
    ]
  ],
  "_from": "shell@>=0.3.2 <0.4.0",
  "_id": "shell@0.3.2",
  "_inCache": true,
  "_location": "/shell",
  "_phantomChildren": {},
  "_requested": {
    "raw": "shell@^0.3.2",
    "scope": null,
    "escapedName": "shell",
    "name": "shell",
    "rawSpec": "^0.3.2",
    "spec": ">=0.3.2 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/shell/-/shell-0.3.2.tgz",
  "_shasum": "117eabe80750bf70e949142a70152d94cc063f1e",
  "_shrinkwrap": null,
  "_spec": "shell@^0.3.2",
  "_where": "/home/javier/Dropbox/Imaginary/Tech/teleprompter/Teleprompter-Core",
  "author": {
    "name": "David Worms",
    "email": "david@adaltas.com"
  },
  "bugs": {
    "url": "https://github.com/wdavidw/node-shell/issues"
  },
  "contributors": [
    {
      "name": "David Worms",
      "email": "david@adaltas.com"
    },
    {
      "name": "Tony",
      "email": "https://github.com/Zearin"
    },
    {
      "name": "Russ Frank",
      "email": "https://github.com/russfrank"
    }
  ],
  "dependencies": {
    "each": "latest",
    "optimist": "latest",
    "pad": "latest"
  },
  "description": "Full features and pretty console applications",
  "devDependencies": {
    "coffee-script": "latest",
    "mocha": "latest",
    "should": "latest"
  },
  "directories": {},
  "dist": {
    "shasum": "117eabe80750bf70e949142a70152d94cc063f1e",
    "tarball": "https://registry.npmjs.org/shell/-/shell-0.3.2.tgz"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "homepage": "http://www.adaltas.com/projects/node-shell",
  "keywords": [
    "cli",
    "console",
    "colors",
    "xterm",
    "args",
    "argument"
  ],
  "maintainers": [
    {
      "name": "david",
      "email": "david@adaltas.com"
    }
  ],
  "name": "shell",
  "optionalDependencies": {},
  "readme": "# Shell: applications with pluggable middleware\n\nShell brings a Connect inspired API, Express inspired routing, and other\nsimilar functionality to console based applications.\n\n* Run both in shell mode and command mode\n* First class citizen for console application (arrows, ctrl-a, ctrl-u,...)\n* User friendly with history, help messages and many other plugings\n* Foundation to structure and build complex based applications\n* Command matching, parameters and advanced functionnalities found in Express routing\n* Flexible architecture based on middlewares for plugin creation and routing enhancement\n* Familiar API for those of us using Connect or Express\n* Predifined commands through plugins for Redis, HTTP servers, Cloud9, CoffeeScript, ...\n\nInstallation\n------------\n\nShell is open source and licensed under the new BSD license.\n\n```bash\nnpm install shell\n```\n\nQuick start\n-----------\n\nThe example below illustrate how to code a simple Redis client.\n\n```javascript\nvar shell = require('shell');\n// Initialization\nvar app = new shell( { chdir: __dirname } )\n// Middleware registration\napp.configure(function() {\n  app.use(function(req, res, next){\n    app.client = require('redis').createClient()\n    next()\n  });\n  app.use(shell.history({\n    shell: app\n  }));\n  app.use(shell.completer({\n    shell: app\n  }));\n  app.use(shell.redis({\n    config: 'redis.conf',\n    pidfile: 'redis.pid'\n  }));\n  app.use(shell.router({\n    shell: app\n  }));\n  app.use(shell.help({\n    shell: app,\n    introduction: true\n  }));\n});\n// Command registration\napp.cmd('redis keys :pattern', 'Find keys', function(req, res, next){\n  app.client.keys(req.params.pattern, function(err, keys){\n    if(err){ return res.styles.red(err.message), next(); }\n    res.cyan(keys.join('\\n')||'no keys');\n    res.prompt();\n  });\n});\n// Event notification\napp.on('quit', function(){\n  app.client.quit();\n});\n```\n\nCreating and Configuring a Shell\n--------------------------------\n\n```javascript\nvar app = shell();\napp.configure(function() {\n  app.use(shell.history({shell: app}));\n  app.use(shell.completer({shell: app}));\n  app.use(shell.help({shell: app, introduction: true}));\n});\napp.configure('prod', function() {\n  app.set('title', 'Production Mode');\n});\n```\n\nShell settings\n--------------\n\nThe constructor `shell` takes an optional object. Options are:\n\n-   `chdir`      , Changes the current working directory of the process, a string of the directory, boolean true will default to the `workspace` (in which case `workspace` must be provided or discoverable)\n-   `prompt`     , Character for command prompt, Defaults to \">>\"\n-   `stdin`      , Source to read from\n-   `stdout`     , Destination to write to\n-   `env`        , Running environment, Defaults to the `env` setting (or `NODE_ENV` if defined, eg: `production`, `develepment`).\n-   `isShell`    , Detect whether the command is runned inside a shell are as a single command.\n-   `noPrompt`   , Do not prompt the user for a command, usefull to plug your own starting mechanisme (eg: starting with a question).\n-   `workspace`  , Project root directory or null if none was found. The discovery strategy start from the current working directory and traverse each parent dir looking for a `node_module` directory or a `package.json` file.\n\nShell settings may be set by calling `app.set('key', value)`.  They can be retrieved by calling the same function without a second argument.\n\n```javascript\nvar app = new shell({\n  chdir: true\n});\napp.set('env', 'prod');\napp.configure('prod', function() {\n  console.log(app.set('env'));\n});\n```\n\nAs with Express, `app.configure` allows the customization of plugins for all or specific environments, while `app.use` registers plugins.\n\nIf `app.configure` is called without specifying the environment as the first argument, the provided callback is always called. Otherwise, the environment must match the `env` setting or the global variable `NODE_ENV`.\n\nMiddlewares and plugins\n-----------------------\n\nShell is build on a middleware architecture. When a command is issued, multiple callbacks are executed sequentially until one decide to stop the process  (calling `res.prompt()` or `shell.quit`. Those callbacks are called middlewares. A callback recieve 3 arguments: a `request` object, a `response` object and the next callback. Traditionnaly, `request` deals with `stdin` while `response` deals with `stdout`.\n\nA plugin is simply a function which configure and return a middleware. Same plugin also enrich the Shell application with new routes and functions.\n\nShell events\n------------\n\nThe following events may be emitted:\n\n-   `\"command\"`  , listen to all executed commands, provide the command name as first argument.\n-   `#{command}` , listen to a particular event.\n-   `\"quit\"`     , called when the application is about to quit.\n-   `\"error\"`    , called on error providing the error object as the first callback argument.\n-   `\"exit\"`     , called when the process exit.\n\nRequest parameter\n-----------------\n\nThe request object contains the following properties:\n\n-   `shell`   , (required) A reference to your shell application.\n-   `command` , Command entered by the user\n-   `params`  , Parameters object extracted from the command, defined by the `shell.router` middleware\n-   `qestion` , Ask questions with optionally suggested and default answers\n-   `confirm` , Ask a question expecting a boolean answer\n\nResponse parameter\n------------------\n\nThe response object inherits from styles containing methods for printing, coloring and bolding:\n\nColors:\n\n-   `black`\n-   `white`\n-   `yellow`\n-   `blue`\n-   `cyan`\n-   `green`\n-   `magenta`\n-   `red`\n-   `bgcolor`\n-   `color`\n-   `nocolor`\n\nStyle:\n\n-   `regular`\n-   `weight`\n-   `bold`\n\nDisplay:\n\n\n-   `prompt`     , Exits the current command and return user to the prompt.\n-   `ln`         , Print a new line\n-   `print`      , Print a text\n-   `println`    , Print a text followed by a new line\n-   `reset`      , Stop any formating like color or bold\n-   `pad`        , Print a text with a fixed padding\n-   `raw`        , Return a text\n\nRouter plugin\n-------------\n\nThe functionality provided by the 'routes' module is very similar to that of\nexpress.  Options passed during creation are:\n\n-   `shell`     , (required) A reference to your shell application.\n-   `sensitive` , (optional) Defaults to `false`, set to `true` if the match should be case sensitive.\n\nNew routes are defined with the `cmd` method. A route is made of pattern against which the user command is matched, an optional description and one or more route specific middlewares to handle the command. The pattern is either a string or a regular expression. Middlewares receive three parameters: a request object, a response object, and a function. Command parameters are substituted and made available in the `params` object of the request parameter.\n\nParameters can have restrictions in parenthesis immediately following the\nkeyword, as in express: `:id([0-9]+)`.  See the `list` route in the example:\n\n```javascript\nvar app = new shell();\napp.configure(function(){\n  app.use(shell.router({\n    shell: app\n  }));\n});\n\n// Route middleware\nvar auth = function(req, res, next){\n  if(req.params.uid == process.getuid()){\n    next()\n  }else{\n    throw new Error('Not me');\n  }\n}\n\n// Global parameter substitution\napp.param('uid', function(req, res, next){\n  exec('whoami', function(err, stdout, sdterr){\n    req.params.username = stdout;\n    next();\n  });\n});\n\n// Simple command\napp.cmd('help', function(req, res){\n  res.cyan('Run this command `./ami user ' + process.getuid() + '`');\n  res.prompt()\n});\n\n// Command with parameter\napp.cmd('user :uid', auth, function(req, res){\n  res.cyan('Yes, you are ' + req.params.username);\n});\n\n// Command with contrained parameter\napp.cmd('user :id([0-9]+)', function(req, res) {\n  res.cyan('User id is ' + req.params.id);\n  res.prompt();\n});\n```\n\nContributors\n------------\n\n*   David Worms : <https://github.com/wdavidw>\n*   Tony: <https://github.com/Zearin>\n*   Russ Frank : <https://github.com/russfrank>\n",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wdavidw/node-shell.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.3.2"
}
