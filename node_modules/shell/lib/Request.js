// Generated by CoffeeScript 1.4.0
var Request, each;

each = require('each');

module.exports = Request = (function() {

  function Request(shell, command) {
    this.shell = shell;
    this.command = command;
  }

  /*
    Ask one or more questions
  */


  Request.prototype.question = function(questions, callback) {
    var answers, isObject, multiple, q, v,
      _this = this;
    isObject = function(v) {
      return typeof v === 'object' && (v != null) && !Array.isArray(v);
    };
    multiple = true;
    answers = {};
    if (isObject(questions)) {
      questions = (function() {
        var _results;
        _results = [];
        for (q in questions) {
          v = questions[q];
          if (v == null) {
            v = {};
          }
          if (!isObject(v)) {
            v = {
              value: v
            };
          }
          v.name = q;
          _results.push(v);
        }
        return _results;
      })();
    } else if (typeof questions === 'string') {
      multiple = false;
      questions = [
        {
          name: questions,
          value: ''
        }
      ];
    }
    return each(questions).on('item', function(question, next) {
      q = "" + question.name + " ";
      if (question.value) {
        q += "[" + question.value + "] ";
      }
      return _this.shell["interface"]().question(q, function(answer) {
        if (answer.substr(-1, 1) === '\n') {
          answer = answer.substr(0, answer.length - 1);
        }
        answers[question.name] = answer === '' ? question.value : answer;
        return next();
      });
    }).on('end', function() {
      if (!multiple) {
        answers = answers[questions[0].name];
      }
      return callback(answers);
    });
  };

  /*
    Ask a question expecting a boolean answer
  */


  Request.prototype.confirm = function(msg, defaultTrue, callback) {
    var args, keyFalse, keyTrue, key_false, key_true, question, _base, _base1, _ref, _ref1,
      _this = this;
    args = arguments;
    if (!callback) {
      callback = defaultTrue;
      defaultTrue = true;
    }
    if ((_ref = (_base = this.shell.settings).key_true) == null) {
      _base.key_true = 'y';
    }
    if ((_ref1 = (_base1 = this.shell.settings).key_false) == null) {
      _base1.key_false = 'n';
    }
    key_true = this.shell.settings.key_true.toLowerCase();
    key_false = this.shell.settings.key_false.toLowerCase();
    keyTrue = defaultTrue ? key_true.toUpperCase() : key_true;
    keyFalse = defaultTrue ? key_false : key_false.toUpperCase();
    msg += ' ';
    msg += "[" + keyTrue + keyFalse + "] ";
    question = this.shell.styles.raw(msg, {
      color: 'green'
    });
    return this.shell["interface"]().question(question, function(answer) {
      var accepted, valid;
      accepted = ['', key_true, key_false];
      if (answer.substr(-1, 1) === '\n') {
        answer = answer.substr(0, answer.length - 1);
      }
      answer = answer.toLowerCase();
      valid = accepted.indexOf(answer) !== -1;
      if (!valid) {
        return _this.confirm.apply(_this, args);
      }
      return callback(answer === key_true || (defaultTrue && answer === ''));
    });
  };

  return Request;

})();
