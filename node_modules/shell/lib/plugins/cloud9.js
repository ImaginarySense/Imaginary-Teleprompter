// Generated by CoffeeScript 1.4.0
var start_stop;

start_stop = require('../start_stop');

/*

Cloud9 plugin
=============

Register two commands, `cloud9 start` and `cloud9 stop`. Unless provided, 
the Cloud9 workspace will be automatically discovered if your project root 
directory contains a "package.json" file or a "node_module" directory.

Options:

-   `config`   , Load the configuration from a config file. Overrides command-line options. Defaults to `null`.
-   `group`    , Run child processes with a specific group.
-   `user`     , Run child processes as a specific user.
-   `action`   , Define an action to execute after the Cloud9 server is started. Defaults to `null`.
-   `ip`       , IP address where Cloud9 will serve from. Defaults to `"127.0.0.1"`.
-   `port`     , Port number where Cloud9 will serve from. Defaults to `3000`.
-   `workspace`, Path to the workspace that will be loaded in Cloud9, Defaults to `Shell.set('workspace')`.
-   `detached` , Wether the Cloud9 process should be attached to the current process. If not defined, default to `false` (the server doesn't run as a daemon).
-   `pidfile`  , Path to the file storing the daemon process id. Defaults to `"/.node_shell/#{md5}.pid"`
-   `stdout`   , Writable stream or file path to redirect cloud9 stdout.
-   `stderr`   , Writable stream or file path to redirect cloud9 stderr.

Example:

```javascript
var app = new shell();
app.configure(function() {
  app.use(shell.router({
    shell: app
  }));
  app.use(shell.cloud9({
    shell: app,
    ip: '0.0.0.0'
  }));
  app.use(shell.help({
    shell: app,
    introduction: true
  }));
});
```

**Important:** If you encounter issue while installing cloud9, it might be because the npm module expect an older version of Node. 

Here's the procedure to use the latest version:

```
git clone https://github.com/ajaxorg/cloud9.git
cd cloud9
git submodule update --init --recursive
npm link
```
*/


module.exports = function(settings) {
  var cmd;
  if (settings == null) {
    settings = {};
  }
  cmd = function() {
    var args;
    args = [];
    args.push('-w');
    args.push(settings.workspace);
    if (settings.config) {
      args.push('-c');
      args.push(settings.config);
    }
    if (settings.group) {
      args.push('-g');
      args.push(settings.group);
    }
    if (settings.user) {
      args.push('-u');
      args.push(settings.user);
    }
    if (settings.action) {
      args.push('-a');
      args.push(settings.action);
    }
    if (settings.ip) {
      args.push('-l');
      args.push(settings.ip);
    }
    if (settings.port) {
      args.push('-p');
      args.push(settings.port);
    }
    return "cloud9 " + (args.join(' '));
  };
  return function(req, res, next) {
    var app, _ref;
    app = req.shell;
    if (app.tmp.cloud9) {
      return next();
    }
    app.tmp.cloud9 = true;
    if ((_ref = settings.workspace) == null) {
      settings.workspace = app.set('workspace');
    }
    if (!settings.workspace) {
      return next(new Error('No workspace provided'));
    }
    settings.cmd = cmd();
    app.cmd('cloud9 start', 'Start Cloud9', function(req, res, next) {
      return start_stop.start(settings, function(err, pid) {
        var ip, message, port;
        if (err) {
          return next(err);
        }
        if (!pid) {
          res.cyan('Cloud9 already started').ln();
          return res.prompt();
        }
        ip = settings.ip || '127.0.0.1';
        port = settings.port || 3000;
        message = "Cloud9 started http://" + ip + ":" + port;
        res.cyan(message).ln();
        return res.prompt();
      });
    });
    app.cmd('cloud9 stop', 'Stop Cloud9', function(req, res, next) {
      return start_stop.stop(settings, function(err, success) {
        if (success) {
          res.cyan('Cloud9 successfully stoped').ln();
        } else {
          res.magenta('Cloud9 was not started').ln();
        }
        return res.prompt();
      });
    });
    return next();
  };
};
