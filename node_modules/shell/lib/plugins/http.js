// Generated by CoffeeScript 1.4.0
var existsSync, fs, path, start_stop;

fs = require('fs');

path = require('path');

existsSync = fs.existsSync || path.existsSync;

start_stop = require('../start_stop');

/*

HTTP server
===========

Register two commands, `http start` and `http stop`. The start command will 
search for "./server.js" and "./app.js" (and additionnaly their CoffeeScript 
alternatives) to run by `node`.

The following properties may be provided as settings:

-   `message_start` Message to display once the server is started
-   `message_stop`  Message to display once the server is stoped
-   `workspace`     Project directory used to resolve relative paths and search for "server" and "app" scripts.
-   `cmd`           Command to start the server, not required if path is provided or if the script is discoverable
-   `path`          Path to the js/coffee script starting the process, may be relative to the workspace, extension isn't required.

Properties derived from the start_stop utility:   

-   `detached`      Wether the HTTP process should be attached to the current process. If not defined, default to `false` (the server doesn't run as a daemon).
-   `pidfile`       Path to the file storing the daemon process id. Defaults to `"/.node_shell/#{md5}.pid"`
-   `stdout`        Writable stream or file path to redirect the server stdout.
-   `stderr`        Writable stream or file path to redirect the server stderr.

Example:

```javascript
var app = new shell();
app.configure(function() {
  app.use(shell.router({
    shell: app
  }));
  app.use(shell.http({
    shell: app
  }));
  app.use(shell.help({
    shell: app,
    introduction: true
  }));
});
```
*/


module.exports = function() {
  var cmd, http, route, settings;
  settings = {};
  cmd = function() {
    var search, searchs, _i, _len;
    searchs = settings.path ? [settings.path] : ['app', 'server', 'lib/app', 'lib/server'];
    for (_i = 0, _len = searchs.length; _i < _len; _i++) {
      search = searchs[_i];
      search = path.resolve(settings.workspace, search);
      if (existsSync("" + search)) {
        if (search.substr(-4) === '.coffee') {
          return "coffee " + search;
        } else {
          return "node " + search;
        }
      }
      if (existsSync("" + search + ".js")) {
        return "node " + search + ".js";
      } else if (existsSync("" + search + ".coffee")) {
        return "coffee " + search + ".coffee";
      }
    }
    throw new Error('Failed to discover a "server.js" or "app.js" file');
  };
  http = null;
  route = function(req, res, next) {
    var app, _ref, _ref1, _ref2;
    app = req.shell;
    if (app.tmp.http) {
      return next();
    }
    app.tmp.http = true;
    if ((_ref = settings.workspace) == null) {
      settings.workspace = app.set('workspace');
    }
    if (!settings.workspace) {
      throw new Error('No workspace provided');
    }
    if ((_ref1 = settings.message_start) == null) {
      settings.message_start = 'HTTP server successfully started';
    }
    if ((_ref2 = settings.message_stop) == null) {
      settings.message_stop = 'HTTP server successfully stopped';
    }
    if (!settings.cmd) {
      settings.cmd = cmd();
    }
    app.cmd('http start', 'Start HTTP server', function(req, res, next) {
      return http = start_stop.start(settings, function(err, pid) {
        if (err) {
          return next(err);
        }
        if (!pid) {
          return res.cyan('HTTP server already started').ln() && res.prompt();
        }
        res.cyan(settings.message_start).ln();
        return res.prompt();
      });
    });
    app.cmd('http stop', 'Stop HTTP server', function(req, res, next) {
      return start_stop.stop(settings, function(err, success) {
        if (success) {
          res.cyan(settings.message_stop).ln();
        } else {
          res.magenta('HTTP server was not started').ln();
        }
        return res.prompt();
      });
    });
    return next();
  };
  if (arguments.length === 1) {
    settings = arguments[0];
    return route;
  } else {
    return route.apply(null, arguments);
  }
};
