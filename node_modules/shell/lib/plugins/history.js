// Generated by CoffeeScript 1.4.0
var Interface, crypto, fs, hash;

fs = require('fs');

crypto = require('crypto');

Interface = require('readline').Interface;

hash = function(value) {
  return crypto.createHash('md5').update(value).digest('hex');
};

/*

History plugin
==============

Persistent command history over multiple sessions. Options passed during creation are:

-   `shell`  , (required) A reference to your shell application.
-   `name`   , Identify your project history file, default to the hash of the exectuted file
-   `dir`    , Location of the history files, defaults to `"#{process.env['HOME']}/.node_shell"`
*/


module.exports = function(settings) {
  var file, json, shell, stream, _ref, _ref1;
  if (!settings.shell) {
    throw new Error('No shell provided');
  }
  shell = settings.shell;
  if (!settings.shell.isShell) {
    return;
  }
  if ((_ref = settings.dir) == null) {
    settings.dir = "" + process.env['HOME'] + "/.node_shell";
  }
  if ((_ref1 = settings.name) == null) {
    settings.name = hash(process.argv[1]);
  }
  file = "" + settings.dir + "/" + settings.file;
  if (!fs.existsSync(settings.dir)) {
    fs.mkdirSync(settings.dir, 0x1c0);
  }
  if (fs.existsSync(file)) {
    try {
      json = fs.readFileSync(file, 'utf8') || '[]';
      settings.shell["interface"]().history = JSON.parse(json);
    } catch (e) {
      settings.shell.styles.red('Corrupted history file').ln();
    }
  }
  stream = fs.createWriteStream(file, {
    flag: 'w'
  });
  Interface.prototype._addHistory = (function(parent) {
    return function() {
      var buffer;
      if (this.history.length) {
        buffer = new Buffer(JSON.stringify(this.history));
        fs.write(stream.fd, buffer, 0, buffer.length, 0);
      }
      return parent.apply(this, arguments);
    };
  })(Interface.prototype._addHistory);
  return null;
};
