// Generated by CoffeeScript 1.4.0
var enrichFiles, fs, start_stop;

fs = require('fs');

start_stop = require('../start_stop');

enrichFiles = function(files) {
  return files.split(' ').map(function(file) {
    if (file.substr(0, 1) !== '/') {
      file = '/' + file;
    }
    if (file.substr(-1, 1) !== '/' && fs.statSync(file).isDirectory()) {
      file += '/';
    }
    return file;
  }).join(' ');
};

/*

CoffeeScript plugin
===================

Start Coffee in `--watch` mode, so scripts are instantly compiled into Javascript.

Options:

-   `src`      , Directory where ".coffee" are stored. Each ".coffee" script will be compiled into a .js JavaScript file of the same name.
-   `join`     , Before compiling, concatenate all scripts together in the order they were passed, and write them into the specified file. Useful for building large projects.
-   `output`   , Directory where compiled JavaScript files are written. Used in conjunction with "compile".
-   `lint`     , If the `jsl` (JavaScript Lint) command is installed, use it to check the compilation of a CoffeeScript file.
-   `require`  , Load a library before compiling or executing your script. Can be used to hook in to the compiler (to add Growl notifications, for example).
-   `detached` , Wether the Coffee process should be attached to the current process. If not defined, default to `false` (the server doesn't run as a daemon).
-   `pidfile`  , Path to the file storing the daemon process id. Defaults to `"/.node_shell/#{md5}.pid"`
-   `stdout`   , Writable stream or file path to redirect cloud9 stdout.
-   `stderr`   , Writable stream or file path to redirect cloud9 stderr.
-   `workspace`, Project directory used to resolve relative paths.

Example:

```javascript
var app = new shell();
app.configure(function() {
  app.use(shell.router({
    shell: app
  }));
  app.use(shell.coffee({
    shell: app
  }));
  app.use(shell.help({
    shell: app,
    introduction: true
  }));
});
```
*/


module.exports = function(settings) {
  var cmd, shell, _ref;
  if (settings == null) {
    settings = {};
  }
  if (!settings.shell) {
    throw new Error('No shell provided');
  }
  shell = settings.shell;
  if ((_ref = settings.workspace) == null) {
    settings.workspace = shell.set('workspace');
  }
  if (!settings.workspace) {
    throw new Error('No workspace provided');
  }
  cmd = function() {
    var args;
    args = [];
    if (settings.join) {
      args.push('-j');
      args.push(enrichFiles(settings.join));
    }
    args.push('-w');
    if (settings.lint) {
      args.push('-l');
    }
    if (settings.require) {
      args.push('-r');
      args.push(settings.require);
    }
    args.push('-b');
    if (settings.output) {
      args.push('-o');
      args.push(enrichFiles(settings.output));
    }
    if (!settings.compile) {
      settings.compile = settings.workspace;
    }
    if (settings.compile) {
      args.push('-c');
      args.push(enrichFiles(settings.compile));
    }
    return cmd = 'coffee ' + args.join(' ');
  };
  settings.cmd = cmd();
  shell.cmd('coffee start', 'Start CoffeeScript', function(req, res, next) {
    return start_stop.start(settings, function(err, pid) {
      var message;
      if (err) {
        return next(err);
      }
      if (!pid) {
        return res.cyan('Already Started').ln();
      }
      message = "CoffeeScript started";
      res.cyan(message).ln();
      return res.prompt();
    });
  });
  return shell.cmd('coffee stop', 'Stop CoffeeScript', function(req, res, next) {
    return start_stop.stop(settings, function(err, success) {
      if (success) {
        res.cyan('CoffeeScript successfully stoped').ln();
      } else {
        res.magenta('CoffeeScript was not started').ln();
      }
      return res.prompt();
    });
  });
};
