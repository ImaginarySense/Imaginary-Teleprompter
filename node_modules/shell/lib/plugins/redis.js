// Generated by CoffeeScript 1.4.0
var start_stop;

start_stop = require('../start_stop');

/*
Redis Plugin
============

Register two commands, `redis start` and `redis stop`. The following properties may be provided as settings:

-   `config`   , Path to the configuration file. Required to launch redis.
-   `detached` , Wether the Redis process should be attached to the current process. If not defined, default to `false` (the server doesn't run as a daemon).
-   `pidfile`  , Path to the file storing the daemon process id. Defaults to `"/.node_shell/#{md5}.pid"`
-   `stdout`   , Writable stream or file path to redirect cloud9 stdout.
-   `stderr`   , Writable stream or file path to redirect cloud9 stderr.

Example:
  
```javascript
var app = shell();
app.configure(function() {
  app.use(shell.router({
    shell: app
  }));
  app.use(shell.redis({
    shell: app,
    config: __dirname+'/redis.conf')
  }));
  app.use(shell.help({
    shell: app,
    introduction: true
  }));
});
```
*/


module.exports = function() {
  var redis, route, settings;
  settings = {};
  redis = null;
  route = function(req, res, next) {
    var app, _ref, _ref1;
    app = req.shell;
    if (app.tmp.redis) {
      return next();
    }
    app.tmp.redis = true;
    if ((_ref = settings.workspace) == null) {
      settings.workspace = app.set('workspace');
    }
    if ((_ref1 = settings.config) == null) {
      settings.config = '';
    }
    settings.cmd = "redis-server " + settings.config;
    app.cmd('redis start', 'Start Redis', function(req, res, next) {
      return redis = start_stop.start(settings, function(err, pid) {
        if (err) {
          return next(err);
        }
        if (!pid) {
          res.cyan('Redis already started').ln();
          return res.prompt();
        }
        res.cyan('Redis started').ln();
        return res.prompt();
      });
    });
    app.cmd('redis stop', 'Stop Redis', function(req, res, next) {
      return start_stop.stop(settings, function(err, success) {
        if (success) {
          res.cyan('Redis successfully stoped').ln();
        } else {
          res.magenta('Redis was not started').ln();
        }
        return res.prompt();
      });
    });
    return next();
  };
  if (arguments.length === 1) {
    settings = arguments[0];
    return route;
  } else {
    return route.apply(null, arguments);
  }
};
